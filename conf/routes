# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET           /user/:userId                        controllers.UserController.getUser(userId: String)
POST          /user                                controllers.UserController.createUser()
PUT           /user/:userId                        controllers.UserController.updateUser(userId: String)
PUT           /user/:userId/password               controllers.UserController.updatePassword(userId: String)
POST          /user/login                          controllers.UserController.login()
GET           /login                               controllers.UserController.getLoginStatus
DELETE        /login                               controllers.UserController.logout()
POST          /admin/login                         controllers.UserController.adminLogin()
PUT           /admin/password                      controllers.UserController.updateAdminPassword()

GET           /user/:userId/friends                controllers.FriendController.getAllFriends(userId: String)
GET           /user/:userId/friends/:fId           controllers.FriendController.getFriendById(userId, fId: String)
DELETE        /user/:userId/friends/:fId           controllers.FriendController.deleteRelation(userId: String, fId: String)
GET           /user/:userId/invented               controllers.FriendController.getInvented(userId: String)
GET           /user/:userId/invented/:fId          controllers.FriendController.getInventedById(userId, fId: String)
PUT           /user/:userId/invented/:fId          controllers.FriendController.acceptInvention(userId, fId: String)
DELETE        /user/:userId/invented/:fId          controllers.FriendController.deleteRelation(userId: String, fId: String)

# User status is a websocket api that receive message
GET           /user/:userId/status                 controllers.UserStatusController.connectWebSocket(userId: String)

# the gameplay that contains a websocket for pushing steps and others normal websocket
GET           /gameplay/:gameId                    controllers.GamePlayController.getGamePlay(gameId: String)
GET           /gameplay/:gameId/step/:index        controllers.GamePlayController.getGameStep(gameId: String, index: Int)
PUT           /gameplay/:gameId/step/:index        controllers.GamePlayController.putGameStep(gameId: String, index: Int)
GET           /gameplay/:gameId/ws                 controllers.GamePlayController.connectWebSocket(gameId: String)

GET           /hash/:value                         controllers.UserController.hash(value: String)

# Map static resources from the /public folder to the /assets URL path
GET           /*file                               controllers.Assets.versioned(path="/public", file: Asset)
